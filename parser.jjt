PARSER_BEGIN(JmmParser)
// código Java que invoca o parser
public class JmmParser {
    public static void main(String args[]) throws ParseException {
        // criação do objecto utilizando o constructor com argumento para
        // ler do standard input (teclado)
        try {
            java.io.FileInputStream file = new java.io.FileInputStream("Test.jmm");
            JmmParser parser = new JmmParser(file);
            SimpleNode root = parser.program();
            root.dump("");
        } catch (java.io.FileNotFoundException e) {
            System.out.println(e);
        }
    }
}
PARSER_END(JmmParser)
// símbolos que não devem ser considerados na análise
SKIP :
{
    " " | "\t" | "\r" | "\n"
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
    < INTEGER : (["0" - "9"])+ >
    | < CLASS : "class" >
    | < EXTENDS : "extends" >
    | < LEFTBRACKET : "{" >
    | < RIGHTBRACKET : "}" >
    | < LEFTPARENTHESES : "(" >
    | < RIGHTPARENTHESES : ")" >
    | < LEFTSQUAREBRACKET : "[" >
    | < RIGHTSQUAREBRACKET : "]" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < STRINGARRAY : "String[]" >
    | < VOID : "void" >
    | < COLON : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < MAIN : "main" >
    | < IF : "if" >    
    | < ELSE : "else" >      
    | < WHILE : "while" >  
    | < RETURN: "return" >
    | < EQUALS: "=" >    
    | < COMMERCIALE: "&&" >
    | < MINOR: "<" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < ASTERISC: "*" >
    | < SLASH: "/" >
    | < LENGTH: "length" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < NEW: "new" >
    | < EXCLAMATION: "!" >
    | < IDENTIFIER : (["a" - "z"] | ["A" - "Z"])+ (["a" - "z"] | ["A" - "Z"] | ["0" - "9"])* >
}
// definição da produção
SimpleNode program() : {}
{
    classDeclaration() <EOF> {return jjtThis;}
}

void classDeclaration() : {}
{
    <CLASS> <IDENTIFIER> (<EXTENDS> <IDENTIFIER>)? 
    <LEFTBRACKET> 
        (varDeclaration())*
        (<PUBLIC> (mainDeclaration() | methodDeclaration()))*
    <RIGHTBRACKET>
}

void mainDeclaration() : {} 
{
    <STATIC> <VOID> <MAIN> <LEFTPARENTHESES> <STRINGARRAY> <IDENTIFIER> <RIGHTPARENTHESES>
    <LEFTBRACKET>
        (LOOKAHEAD(2) varDeclaration())*
        (statement())*
    <RIGHTBRACKET>
}

void varDeclaration() : {}
{
    type() <IDENTIFIER> {jjtThis.Op = JmmParserConstants.IDENTIFIER;} <SEMICOLON>
}

void methodDeclaration() : {}
{
    type() <IDENTIFIER> <LEFTPARENTHESES> (type() <IDENTIFIER> ( <COLON> type() <IDENTIFIER>)*)? <RIGHTPARENTHESES>
    <LEFTBRACKET>
        (LOOKAHEAD(2) varDeclaration())*
        (statement())*
        <RETURN> expression() <SEMICOLON>
    <RIGHTBRACKET>
}

void type() : {}
{
    <INT>{jjtThis.Op = JmmParserConstants.INT;}[<LEFTSQUAREBRACKET> {jjtThis.Op = JmmParserConstants.LEFTSQUAREBRACKET;} <RIGHTSQUAREBRACKET> {jjtThis.Op = JmmParserConstants.RIGHTSQUAREBRACKET;}] | 
    <BOOLEAN> {jjtThis.Op = JmmParserConstants.BOOLEAN;} | 
    <IDENTIFIER> {jjtThis.Op = JmmParserConstants.IDENTIFIER;}
}

void statement() : {}
{
    (<LEFTBRACKET> (statement())* <RIGHTBRACKET>) |   
    (<IF> <LEFTPARENTHESES> expression() <RIGHTPARENTHESES> statement() <ELSE> statement()) |
    (<WHILE> <LEFTPARENTHESES> expression() <RIGHTPARENTHESES> statement()) |
    LOOKAHEAD(expression() <SEMICOLON>) (expression() <SEMICOLON>) |
    (<IDENTIFIER>(
        (<EQUALS> expression() <SEMICOLON>) |
        (<LEFTSQUAREBRACKET> expression() <RIGHTSQUAREBRACKET> <EQUALS> expression() <SEMICOLON>))
    )
}

void expression() : {}
{
    expression2() ((
            <COMMERCIALE> {jjtThis.Op = JmmParserConstants.COMMERCIALE;} | 
            <MINOR> {jjtThis.Op = JmmParserConstants.MINOR;}
        ) 
        expression2()
    )*
}

void expression2() : {}
{
    expression3() ((
            <PLUS> {jjtThis.Op = JmmParserConstants.PLUS;} | 
            <MINUS> {jjtThis.Op = JmmParserConstants.MINUS;}
        ) 
        expression3()
    )*
}

void expression3() : {}
{
    expression4() ((
            <ASTERISC> {jjtThis.Op = JmmParserConstants.ASTERISC;} | 
            <SLASH> {jjtThis.Op = JmmParserConstants.SLASH;}
        ) 
        expression4()
    )*
}

void expression4() : {}
{
    expression5() (
        <LEFTSQUAREBRACKET> expression() <RIGHTSQUAREBRACKET>
    )*
}

void expression5() : {}
{
    expressionfinal() ((
            <DOT> (
                (<LENGTH> {jjtThis.Op = JmmParserConstants.LENGTH;}) | 
                (<IDENTIFIER> {jjtThis.Op = JmmParserConstants.IDENTIFIER;} <LEFTPARENTHESES> (expression() (<COLON> expression())*)? <RIGHTPARENTHESES>) 
            )
        ) 
        expressionfinal()
    )*
}

void expressionfinal() : {}
{
    (<INTEGER> {jjtThis.Op = JmmParserConstants.INTEGER;}) |
    (<TRUE> {jjtThis.Op = JmmParserConstants.TRUE;}) |
    (<FALSE> {jjtThis.Op = JmmParserConstants.FALSE;}) |
    (<IDENTIFIER> {jjtThis.Op = JmmParserConstants.IDENTIFIER;}) |
    (<THIS> {jjtThis.Op = JmmParserConstants.THIS;}) |
    (<EXCLAMATION> {jjtThis.Op = JmmParserConstants.EXCLAMATION;} expressionfinal()) |
    (<LEFTPARENTHESES> expression() <RIGHTPARENTHESES>) |
    (<NEW> {jjtThis.Op = JmmParserConstants.NEW;} ((<INT> {jjtThis.Op = JmmParserConstants.INT;} <LEFTSQUAREBRACKET> expression() <RIGHTSQUAREBRACKET>) | (<IDENTIFIER> {jjtThis.Op = JmmParserConstants.IDENTIFIER;} <LEFTPARENTHESES> <RIGHTPARENTHESES>) ))
}