options {
    MULTI=true;
    LOOKAHEAD=1;
    NODE_SCOPE_HOOK=true;
}

PARSER_BEGIN(JmmParser)
// código Java que invoca o parser
import java.util.LinkedHashMap;

public class JmmParser {
    private SymbolTable classTable = new SymbolTable();
    private LinkedHashMap<String, SymbolTable> methods = new LinkedHashMap<String, SymbolTable>();
    static private JmmParser instance;

    static JmmParser getInstance() {
        return instance;
    }

    public SymbolTable getClassTable() {
        return classTable;
    }

    public LinkedHashMap<String, SymbolTable> getMethods() {
        return methods;
    }

    public boolean containsMethod(String identifier) {
        return methods.containsKey(identifier);
    }

    public SymbolTable getMethod(String identifier) {
        return methods.get(identifier);
    }

    public static void main(String args[]) throws ParseException {
        // criação do objecto utilizando o constructor com argumento para
        // ler do standard input (teclado)
        try {
            java.io.FileInputStream file = new java.io.FileInputStream("test-files/" + args[0]);
            JmmParser parser = new JmmParser(file);
            instance = parser;
            SimpleNode root = parser.program();
            root.dump("");
            root.createSymbolTable(parser.getClassTable());
            parser.print();
            root.applySemanticAnalysis(parser.getClassTable());

            CodeGenerator codeGen = new CodeGenerator(root);
            codeGen.generate();
        } catch (java.io.FileNotFoundException e) {
            System.out.println(e);
        }
    }

    public void addMethod(String identifier, SymbolTable table) {
        if (methods.containsKey(identifier)) {
            System.out.println("A method with that identifier already exists.");
            return;
        }
        methods.put(identifier, table);
    }

    public static void jjtreeOpenNodeScope(Node n) {
        ((SimpleNode) n).setLine(getToken(1).beginLine);
    }

    public static void jjtreeCloseNodeScope(Node n) {}

    public void print() {
        System.out.println("\nSYMBOL TABLE\n\nclass " + classTable.toString());
        for (String s : methods.keySet()) {
            System.out.println(methods.get(s).getType() + " " + s + " " + methods.get(s).toString());
        }
    }
}
PARSER_END(JmmParser)
// símbolos que não devem ser considerados na análise 
SKIP :
{
    " "
    | "\t"
    | "\r"
    | "\n"
    | < "//"(~["\r","\n"])* >
    | < "/*" > : MLCOMMENT
}
//SKIP multi-lined comments
<MLCOMMENT> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}
//global variable for error count
TOKEN_MGR_DECLS : {
    int errors = 0;
}
// definição dos tokens (símbolos terminais)
TOKEN :
{
    < INTEGER : (["0" - "9"])+ >
    | < CLASS : "class" >
    | < EXTENDS : "extends" >
    | < LEFTBRACKET : "{" >
    | < RIGHTBRACKET : "}" >
    | < LEFTPARENTHESES : "(" >
    | < RIGHTPARENTHESES : ")" >
    | < LEFTSQUAREBRACKET : "[" >
    | < RIGHTSQUAREBRACKET : "]" >
    | < INT : "int" >
    | < BOOLEAN : "boolean" >
    | < STRINGARRAY : "String[]" >
    | < VOID : "void" >
    | < COLON : "," >
    | < DOT : "." >
    | < SEMICOLON : ";" >
    | < PUBLIC : "public" >
    | < STATIC : "static" >
    | < MAIN : "main" >
    | < IF : "if" >
    | < ELSE : "else" >
    | < WHILE : "while" >
    | < RETURN: "return" >
    | < EQUALS: "=" >
    | < COMMERCIALE: "&&" >
    | < MINOR: "<" >
    | < ADDSUB: "+" | "-" >
    | < MULDIV: "*" | "/" >
    | < LENGTH: "length" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < NEW: "new" >
    | < EXCLAMATION: "!" >
    | < IDENTIFIER : (["a" - "z"] | ["A" - "Z"])+ (["a" - "z"] | ["A" - "Z"] | ["0" - "9"] | "_")* >
}
// definição da produção
SimpleNode program() : {}
{
    classDeclaration() <EOF> {return jjtThis;}
}

void classDeclaration() : {Token t, t1;}
{
    <CLASS> t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER [t1=<EXTENDS> (t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER) {jjtThis.index = t1.kind;}#EXTENDS(1)]
    <LEFTBRACKET>
        (varDeclaration())*
        (t=<PUBLIC> (mainDeclaration() | methodDeclaration()) {jjtThis.index = t.kind;}#PUBLIC(1))*
    <RIGHTBRACKET>
}

void mainDeclaration() : {Token t;}
{
    t=<STATIC> {jjtThis.index = t.kind;}#STATIC t=<VOID> {jjtThis.index = t.kind;}#VOID <MAIN> <LEFTPARENTHESES> t=<STRINGARRAY> {jjtThis.index = t.kind;}#STRINGARRAY t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER(1) <RIGHTPARENTHESES>
    <LEFTBRACKET>
        methodBody()
    <RIGHTBRACKET>
}

void varDeclaration() : {Token t;}
{
    type() t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER <SEMICOLON>
}

void methodDeclaration() : {Token t;}
{
    type() t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER <LEFTPARENTHESES> (parameterDeclaration() ( <COLON> parameterDeclaration())*)? <RIGHTPARENTHESES>
    <LEFTBRACKET>
        methodBody()
        t=<RETURN> expression() {jjtThis.index = t.kind;}#RETURN(1) <SEMICOLON>
    <RIGHTBRACKET>
}

void methodBody() : {}
{
    (LOOKAHEAD(2) varDeclaration())*
    (statement())*
}

void parameterDeclaration() : {Token t;}
{
    type() t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER
}

void type() : {Token t;}
{
    (t=<INT> {jjtThis.index = t.kind;}#INT [t=<LEFTSQUAREBRACKET> {jjtThis.index = t.kind;}#LEFTSQUAREBRACKET t=<RIGHTSQUAREBRACKET> {jjtThis.index = t.kind;}#RIGHTSQUAREBRACKET]) |
    (t=<BOOLEAN> {jjtThis.index = t.kind;}#BOOLEAN) |
    (t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER)
}

void statement() #void : {Token t;}
{
    (<LEFTBRACKET> (statement())* <RIGHTBRACKET>)
    | ifStatement()
    | whileStatement()
    | (expression() [t=<EQUALS> expression() {jjtThis.index = t.kind;}#EQUALS(2)] <SEMICOLON>)
}

void ifStatement() #void : {Token t;}
{
    t=<IF> condition()
    body() {jjtThis.index = t.kind;}#IF(2)
    t=<ELSE>
    body() {jjtThis.index = t.kind;}#ELSE(1)
}

void whileStatement() #void: {Token t, t1;}
{
    t=<WHILE>
    try {
        condition()
    }
    catch (ParseException e) {
        System.out.println(e.toString());
        {token_source.errors++; if(token_source.errors==10){System.out.println("10 errors found, stopping program!"); System.exit(-1);}}
        do {
            t1 = getNextToken();
        } while (t1.kind != RIGHTPARENTHESES);
    }
    body()
    {jjtThis.index = t.kind;}#WHILE(2)
}

void condition() : {}
{
    <LEFTPARENTHESES> expression() <RIGHTPARENTHESES>
}

void body() : {}
{
    statement()
}

void expression() #void: {Token t;}
{
    expression2() (
        t=<COMMERCIALE> expression2() {jjtThis.index = t.kind;}#COMMERCIALE(2)
    )*
}

void expression2() #void: {Token t;}
{
    expression3() (
        t=<MINOR> expression3() {jjtThis.index = t.kind;}#MINOR(2)
    )*
}

void expression3() #void: {Token t;}
{
    expression4() (
        t=<ADDSUB> expression4() {jjtThis.name = t.image;}#ADDSUB(2)
    )*
}

void expression4() #void: {Token t;}
{
    expression5() (
        t=<MULDIV> expression5() {jjtThis.name = t.image;}#MULDIV(2)
    )*
}

void expression5() #void: {}
{
    expression6() [array() #array(2)]
}

void expression6() #void: {Token t, t1;}
{
    expression7() |
    t=<EXCLAMATION> expression7() {jjtThis.index = t.kind;}#EXCLAMATION(1)
}

void functionCall() : {Token t;}
{
    t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER <LEFTPARENTHESES> (parameters())? <RIGHTPARENTHESES>
}

void parameters() : {}
{
    expression() (<COLON> expression())*
}

void expression7() #void: {Token t, t1;}
{
    expressionfinal() (
        t=<DOT> (
            (t1=<LENGTH> {jjtThis.index = t1.kind;}#LENGTH)
            | (functionCall())
        )
        {jjtThis.index = t.kind;}#DOT(2)
    )*
}

void expressionfinal() #void: {Token t, t1;}
{
    (t=<INTEGER> {jjtThis.name = t.image;}#INTEGER)|
    (t=<TRUE> {jjtThis.index = t.kind;}#TRUE) |
    (t=<FALSE> {jjtThis.index = t.kind;}#FALSE) |
    (t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER) |
    (t=<THIS> {jjtThis.index = t.kind;}#THIS) |
    (<LEFTPARENTHESES> expression() <RIGHTPARENTHESES>) |
    (t1=<NEW> (((t=<INT> {jjtThis.index = t.kind;}#INT) array() #array(2) {jjtThis.index = t1.kind;}#NEW(1)) | ((t=<IDENTIFIER> {jjtThis.name = t.image;}#IDENTIFIER) {jjtThis.index = t1.kind;}#NEW(1) <LEFTPARENTHESES> <RIGHTPARENTHESES>) ))
}

void array() #void: {}
{
    <LEFTSQUAREBRACKET> expression() <RIGHTSQUAREBRACKET>
}