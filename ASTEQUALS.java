/* Generated By:JJTree: Do not edit this line. ASTEQUALS.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTEQUALS extends SimpleNode {
    public ASTEQUALS(int id) {
        super(id);
    }

    public ASTEQUALS(JmmParser p, int id) {
        super(p, id);
    }

    public void applySemanticAnalysis(SymbolTable table) {
        SimpleNode lhs = ((SimpleNode) children[0]);
        SimpleNode rhs = ((SimpleNode) children[1]);

        if (lhs.name != null) {
            Symbol s = table.getSymbol(lhs.name);
            if (s != null) {
                if (!s.isInitialized()) s.initialize();
                rhs.applySemanticAnalysis(table);
                return;
            }
        } else if (lhs instanceof ASTarray) {
            SimpleNode var = ((SimpleNode) lhs.children[0]);
            SimpleNode access = ((SimpleNode) lhs.children[1]);
            if (var.name != null) {
                Symbol s = table.getSymbol(var.name);
                if (s != null) {
                    if (!s.getType().equals("int[]")) {
                        System.out.println("Variable not of type int[] on line " + ((SimpleNode) children[0]).getLine());
                        System.exit(0);
                    }

                    if (!s.isInitialized()) {
                        System.out.println("Array not initialized on line " + ((SimpleNode) children[0]).getLine());
                        System.exit(0);
                    }

                    access.applySemanticAnalysis(table);
                    return;
                }
            }
        }

        System.out.println("Left side of an assignment isn't a known variable on line " + ((SimpleNode) children[0]).getLine());
        System.exit(0);
    }
}
/* JavaCC - OriginalChecksum=90633a8d903cabadf203c4d31e06b45a (do not edit this line) */
